apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: clone-repos
spec:
  params:
    - name: event-repo-name
    - name: github-user
    - name: github-branch
    - name: scripts-dir
    - name: repo-list
  workspaces:
    - name: sources
  stepTemplate:
    name: clone-repos-step-template
    image: image-registry.openshift-image-registry.svc:5000/cicd/ubi8-tip
    workingDir: /workspace/sources
    env:
      - name: GH_TOKEN
        valueFrom:
          secretKeyRef:
            name: tip-git-basic-auth
            key: password
  results:
    - name: pod-name
      description: The GitHub topic tells which pod an integration belongs to.
  steps:
  
    - name: get-build-repo
      script: |
        #!/bin/bash

        set -eu

        echo "Event repo name: $(params.event-repo-name)"
        echo "GitHub user: $(params.github-user)"

        # TODO: build repo needs to be transfered to user:tineikt
        git clone https://github.com/andreasbradahl-avella/ace-pipelines-build-repo.git build-repo

    - name: get-topic-from-event-repo
      script: |
        #!/bin/bash

        set -eu

        echo $(./$(params.scripts-dir)/get_topic.sh $GH_TOKEN $(params.github-user) $(params.event-repo-name)) | tee topic.txt
        TOPIC=$(echo $(cat topic.txt))
  
        if [ -z "$TOPIC" ]; then
          POD_NAME=$(params.event-repo-name)
          echo ${POD_NAME::6} | tee $(results.pod-name.path) # 32 char limit in pod name
          echo "No topic with pod bundle name found for this repo. Cloning event repo only..."
          jq -n --arg repo "$(params.event-repo-name)" '{"repoName":$repo}' > $(params.repo-list)
        else
          echo $TOPIC | sed 's/pod-//' > $(results.pod-name.path)
          ./$(params.scripts-dir)/get_repo_list_for_topic.sh $GH_TOKEN $(params.github-user) $TOPIC $(params.repo-list)
          echo "Found $(jq length $(params.repo-list)) repos with bundle topic name '$TOPIC'."
        fi

        cat $(params.repo-list)


    - name: get-repos-with-this-topic
      script: |
        #!/bin/bash

        set -eu

        mkdir -p common-workspace
        
        # For each repo in repo list, fetch transitive dependencies
        jq -cr '.[]' $(params.repo-list) | while read repo; do
          python3 $(params.scripts-dir)/fetch_dependencies_recursively.py $repo $(params.github-branch) "/workspace/sources/common-workspace"
        done

        # TODO: For debug purposes - remove when appropriate
        find /workspace -type d
