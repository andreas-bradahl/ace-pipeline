apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-and-deploy-integration-server
spec:
  params:
    - name: release-name
    - name: image-name
    - name: namespace
    - name: commit-id
  steps:
    - name: create-is-manifest
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli
      script: |
        printf "Creating IntegrationServer manifest"
        cat << EOF > integrationserver.yaml
        apiVersion: appconnect.ibm.com/v1beta1
        kind: IntegrationServer
        metadata:
          name: $(params.release-name)
          labels:
            topic: $(params.release-name)
            commitId: $(params.commit-id)
          namespace: $(params.namespace)
        spec:
          license:
            accept: true
            license: L-APEH-BTHFYQ
            use: CloudPakForIntegrationNonProduction
          pod:
            containers:
              runtime:
                image: image-registry.openshift-image-registry.svc:5000/$(params.namespace)/$(params.image-name)-$(params.commit-id)
                imagePullPolicy: Always
                resources:
                  limits:
                    cpu: 500m
                    memory: 500Mi
                  requests:
                    cpu: 300m
                    memory: 300Mi
          adminServerSecure: true
          router:
            timeout: 120s
          designerFlowsOperationMode: disabled
          service:
            endpointType: http
          version: 11.0.0.10-r3-eus
          replicas: 1
          barURL: ''
        EOF
    - name: deploy-is-manifest
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli
      script: |
        printf "Applying IntegrationServer manifest to OpenShift cluster"
        oc apply -f integrationserver.yaml
    - name: wait-for-pod-readiness
      image: image-registry.openshift-image-registry.svc:5000/openshift/cli
      script: |
        #!/bin/bash
        
        printf "Waiting for deployment to be created\n."

        timeout 10m bash -c 'until oc get deployment.apps/$(params.release-name)-is &> /dev/null
        do
          printf "." 
          sleep 2
        done'

        if [[ $(oc get deployment.apps/$(params.release-name)-is) ]]
        then
          printf "\nDeployment found.\n"
          printf "Waiting for deployment condition=Available.\n"
          # Waits until pod is ready for traffic
          oc wait --for=condition=Available deployment/$(params.release-name)-is --timeout=90s
        fi