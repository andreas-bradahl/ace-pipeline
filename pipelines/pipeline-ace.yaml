apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline-ace
spec:
  description: |
    Simple pipeline to demonstrate ACE build on OpenShift
    pipelines.
  workspaces:
  - name: shared-data
    description: |
      This workspace will receive the cloned git repo and be passed
      to the next Task for the commit to be checked.
  params:
  - name: event-repo-name
    description: The git repository that was modified to trigger pipeline run
  - name: github-user
    description: The organization/user of the GitHub account where the event has happened.
  - name: scripts-dir
    default: "build-repo/scripts"
  - name: repo-list
    default: "repo_list.json"
  - name: github-branch
    default: cicd
  # - name: application-name
  #   type: string
  #   description: The release name of the application
  # - name: commit-id
  #   type: string
  #   description: The commit hash identifier for the current HEAD commit
  tasks:
  
    # Clone git repository that was modified
    - name: clone-repos
      taskRef:
        name: clone-repos
      workspaces:
      - name: sources
        workspace: shared-data
      params:
      - name: event-repo-name
        value: $(params.event-repo-name)
      - name: github-user
        value: $(params.github-user)
      - name: github-branch
        value: $(params.github-branch)
      - name: scripts-dir
        value: $(params.scripts-dir)
      - name: repo-list
        value: $(params.repo-list)

    # Build BAR files and Docker images
    - name: build-artifacts
      taskRef:
        name: build-artifacts
      runAfter:
        - clone-repos
      workspaces:
      - name: sources
        workspace: shared-data
      params:
      - name: scripts-dir
        value: $(params.scripts-dir)
      - name: repo-list
        value: $(params.repo-list)
      - name: pod-name
        value: $(tasks.clone-repos.results.pod-name)

    # Task 4: Create and deploy IntegrationServer manifest
    - name: deploy-to-test
      taskRef:
        name: create-and-deploy-integration-server
      runAfter:
        - build-artifacts
      params:
        - name: pod-name
          value: $(tasks.clone-repos.results.pod-name)
        - name: namespace
          value: $(context.pipelineRun.namespace)
  
    # - name: build-image
    #   taskRef:
    #     name: buildah
    #     kind: ClusterTask
    #   runAfter:
    #   - build-artifacts
    #   workspaces:
    #   - name: source
    #     workspace: shared-data
    #   params:
    #   - name: IMAGE
    #     value: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/$(tasks.clone-repos.results.pod-name)
    #   - name: TLSVERIFY
    #     value: 'false'

    # # Inspect file system
    # - name: inspect
    #   taskRef:
    #     name: inspect
    #   runAfter:
    #     - store-list-of-dependent-repos
    #   workspaces:
    #   - name: source
    #     workspace: shared-data
    #   params:
    #   - name: path
    #     value: "/workspace"
    # # Run Python script which fetches and stores list of repos
    # - name: fetch-and-store-repo-list
    #   taskRef:
    #     name: run-python-script
    #   runAfter:
    #     - fetch-build-scripts
    #   workspaces:
    #   - name: data-location
    #     workspace: shared-data
    #   params:
    #     - name: script-name
    #       value: $(params.script-name)
    #     - name: argument-list
    #       value: $(params.argument-list)
    # # Git clone all ACE repos
    # - name: clone-ace-repos
    #   taskRef:
    #     name: clone-ace-repos
    #   runAfter:
    #     - fetch-and-store-repo-list
    #   workspaces:
    #   - name: sources
    #     workspace: shared-data
    # # Build BAR files and container image
    # - name: build-artifacts
    #   taskRef:
    #     name: build-artifacts
    #   runAfter:
    #     - clone-ace-repos
    #   workspaces:
    #   - name: sources
    #     workspace: shared-data
    # # Create an inline Dockerfile to create a container image
  #   # Task 5: Run SoapUI tests against deployed route
  #   - name: run-e2e-tests
  #     taskRef:
  #       name: run-e2e-tests
  #     runAfter:
  #       - deploy-to-test
  #     params:
  #       - name: application-name
  #         value: $(params.application-name)
  #     workspaces:
  #       - name: source
  #         workspace: shared-data
  #   # Task 6: Deploy to production environment
    # - name: deploy-to-prod
    #   taskRef:
    #     name: create-and-deploy-integration-server
    #   runAfter:
    #     - build-image
    #   params:
    #     - name: application-name
    #       value: $(params.github-tag)-prod
    #     - name: image-name
    #       value: $(params.github-tag)
    #     - name: namespace
    #       value: $(context.pipelineRun.namespace)
    #     - name: commit-id
    #       value: $(params.commit-id)
  # finally:
  #   # Task 7: Clean up
  #   - name: clean-up
  #     taskRef:
  #       name: clean-up
  #     params:
  #       - name: application-name
  #         value: $(params.application-name)