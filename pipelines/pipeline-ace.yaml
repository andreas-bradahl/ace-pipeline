apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline-ace
spec:
  description: |
    Simple pipeline to demonstrate ACE build on OpenShift
    pipelines.
  params:
  - name: repo-url
    type: string
    description: The git repository URL to clone from.
  - name: script-name
    type: string
    description: The name of the Python script to be run (name without .py extension)
  - name: argument-list
    type: string
    description: |
      The list of arguments to pass to the Python script as one single string.
      Separate arguments with spaces, and add \" before first argument and after last argument.
  # - name: release-name
  #   type: string
  #   description: The release name of the application
  # - name: commit-id
  #   type: string
  #   description: The commit hash identifier for the current HEAD commit
  workspaces:
  - name: shared-data
    description: |
      This workspace will receive the cloned git repo and be passed
      to the next Task for the commit to be checked.
  tasks:
    # Task 1: Clone git repository with build scripts to workspace
    - name: fetch-build-scripts
      taskRef:
        name: git-clone
        kind: ClusterTask
      workspaces:
      - name: output
        workspace: shared-data
      params:
      - name: url
        value: $(params.repo-url)
    # Debugging task
    - name: inspect
      taskRef: 
        name: inspect
      runAfter:
        - fetch-build-scripts
      workspaces:
      - name: source
        workspace: shared-data
    # Run test script from pipeline
    - name: store-repo-list
      taskRef:
        name: run-python-script
      runAfter:
        - inspect
      workspaces:
      - name: data-location
        workspace: shared-data
      params:
        - name: script-name
          value: $(params.script-name)
        - name: argument-list
          value: $(params.argument-list)
    # Inspect workspace after repo list is downloaded
    - name: inspect-repo-list
      taskRef: 
        name: inspect
      runAfter:
        - store-repo-list
      workspaces:
      - name: source
        workspace: shared-data
    # Task 2: Run code level tests, continuous inspection etc.
    # Task 3: Build ACE image and push to OCP registry
  #   - name: build-ace-image
  #     taskRef:
  #       name: buildah
  #       kind: ClusterTask
  #     runAfter:
  #       - fetch-repo
  #     workspaces:
  #       - name: source
  #         workspace: shared-data
  #     params:
  #       - name: IMAGE
  #         value: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/$(params.release-name)-$(params.commit-id)
  #       - name: TLSVERIFY
  #         value: 'false'
  #   # Task 4: Create and deploy IntegrationServer manifest
  #   - name: deploy-to-test
  #     taskRef:
  #       name: create-and-deploy-integration-server
  #     runAfter:
  #       - build-ace-image
  #     params:
  #       - name: release-name
  #         value: $(params.release-name)-test
  #       - name: image-name
  #         value: $(params.release-name)
  #       - name: namespace
  #         value: $(context.pipelineRun.namespace)
  #       - name: commit-id
  #         value: $(params.commit-id)
  #   # Task 5: Run SoapUI tests against deployed route
  #   - name: run-e2e-tests
  #     taskRef:
  #       name: run-e2e-tests
  #     runAfter:
  #       - deploy-to-test
  #     params:
  #       - name: release-name
  #         value: $(params.release-name)
  #     workspaces:
  #       - name: source
  #         workspace: shared-data
  #   # Task 6: Deploy to production environment
  #   - name: deploy-to-prod
  #     taskRef:
  #       name: create-and-deploy-integration-server
  #     runAfter:
  #       - run-e2e-tests
  #     params:
  #       - name: release-name
  #         value: $(params.release-name)-prod
  #       - name: image-name
  #         value: $(params.release-name)
  #       - name: namespace
  #         value: $(context.pipelineRun.namespace)
  #       - name: commit-id
  #         value: $(params.commit-id)
  # finally:
  #   # Task 7: Clean up
  #   - name: clean-up
  #     taskRef:
  #       name: clean-up
  #     params:
  #       - name: release-name
  #         value: $(params.release-name)